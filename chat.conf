worker_processes  1;  # this demo is not thread safe.

daemon off;           # we'll start nginx from docker.
user nginx;

worker_rlimit_nofile  32768;
error_log  logs/error.log  info;
pid        logs/nginx.pid;

events {
    worker_connections  32768;
}

http {
    include                 mime.types;
    default_type            application/octet-stream;
    keepalive_timeout       6500;
    charset                 "utf8";
    ignore_invalid_headers  on;

    lua_package_path '/opt/openresty/nginx/conf/?.lua;;';

    init_by_lua '
        cjson = require "cjson"
        chat = require("chat")
    ';

    server {
        listen 80 so_keepalive=20s:3s:6;
        # server_name    localhost;
        server_tokens off;

        location ~ "^/sub/(?P<channel>[a-zA-Z\d_-]+)$" {
            lua_socket_log_errors off;
            lua_check_client_abort on;
            content_by_lua '
                chat.event_source_location()
            ';
        }

        location ~ "^/upload/(?P<channel>[a-zA-Z\d_-]+)$" { 
            set_secure_random_alphanum $dir  1;
            set_secure_random_alphanum $filename 16;
            client_max_body_size 256k;                   # this prototype uses small images only.

            access_by_lua '
                if not chat.is_channel_active(ngx.var.channel) then
                    ngx.exit(403)
                end
            ';
            content_by_lua '
                chat.file_upload_location()
                local path = "/img/"..ngx.var.dir.."/"..ngx.var.filename;
                chat.publish_event(ngx.var.channel, "image", path)
                ngx.exit(200)
            ';
        }

        location ~ "/img/(?P<dir>[a-zA-Z\d])/(?P<filename>[a-zA-Z\d]+)$" {
            add_header x-content-type-options "nosniff";
            add_header x-frame-options "deny";
            add_header x-xss-protection "1; mode=block";
            default_type text/plain;
            alias /opt/openresty/nginx/uploads/$dir/$filename;
        }

        location ~ "^/pub/(?P<channel>[a-zA-Z\d_-]+)$" {
            client_max_body_size 32k;
            content_by_lua '
                ngx.req.read_body()
                chat.publish_event(ngx.var.channel, nil, ngx.var.request_body)
                ngx.exit(200)
            ';
        }

        location / {
            root   html;
            index  secureup.html;
        }

        location /stats {
            stub_status on;
            access_log on;
        }
    }
}
